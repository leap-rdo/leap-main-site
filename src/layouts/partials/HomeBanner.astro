---
import { Image } from "astro:assets";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify } from "@/lib/utils/textConverter";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "../../i18n/utils";
import fetchApi from "../../lib/strapi";
import type Home from "../../interfaces/home";

const lang = getLangFromUrl(Astro.url);
const homeData = await fetchApi<Home>({
  endpoint: "home",
  wrappedByKey: "data",
  query: { locale: lang, populate: "*" },
});

const { heroTitle, heroDescription, heroImage } = homeData;
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

{
  (
    <section class="pb-0 pt-16">
      <div class="container">
        <div class="row justify-center">
          <div class="mb-8 text-center md:col-9 lg:col-11">
            {heroTitle && (
              <h1
                set:html={markdownify(heroTitle)}
                data-aos="fade-up-sm"
                class="mb-4 text-h3 lg:text-h1"
              />
            )}
            {heroDescription && (
              <p
                set:html={markdownify(heroDescription)}
                data-aos="fade-up-sm"
                class="mb-8 text-lg/[inherit]"
              />
            )}
            <ul class="flex flex-wrap justify-center gap-4">
              <li data-aos="fade-up-sm" data-aos-delay={100 + 0 * 50}>
                <a
                  class="btn-primary btn"
                  href={translatePath("/contact/")}
                  target="_self"
                  rel="noopener">
                  {t("nav.contact")}
                  <span class="sr-only">Details</span>
                  <span class="icon-wrapper">
                    <span class="icon">
                      <DynamicIcon
                        icon={
                          t("direction") == "ltr"
                            ? "FaArrowRight"
                            : "FaArrowLeft"
                        }
                      />
                    </span>
                    <span class="icon" aria-hidden="true">
                      <DynamicIcon
                        icon={
                          t("direction") == "ltr"
                            ? "FaArrowRight"
                            : "FaArrowLeft"
                        }
                      />
                    </span>
                  </span>
                </a>
              </li>
              <li data-aos="fade-up-sm" data-aos-delay={100 + 1 * 50}>
                <a
                  class="btn-outline-primary btn"
                  href={translatePath("/about/")}
                  target="_self"
                  rel="noopener">
                  {t("learn")}
                  <span class="sr-only">Details</span>
                  <span class="icon-wrapper">
                    <span class="icon">
                      <DynamicIcon
                        icon={
                          t("direction") == "ltr"
                            ? "FaArrowRight"
                            : "FaArrowLeft"
                        }
                      />
                    </span>
                    <span class="icon" aria-hidden="true">
                      <DynamicIcon
                        icon={
                          t("direction") == "ltr"
                            ? "FaArrowRight"
                            : "FaArrowLeft"
                        }
                      />
                    </span>
                  </span>
                </a>
              </li>
            </ul>
          </div>
          {heroImage && (
            <>
              <div
                class="col-12 lg:pt-2 order-2"
                data-aos="fade-up-sm"
                data-aos-delay="400">
                <div class="max-h-[510px] overflow-hidden">
                  <Image
                    src={import.meta.env.STRAPI_URL + heroImage.url}
                    alt={heroImage.alternativeText}
                    width={heroImage.width}
                    height={heroImage.height}
                  />
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </section>
  )
}
